#The Map Function and Filter
The Map Function:
idea : applying a function to an iterable data 

formatting:
map(function_name, sequence)

- function_name: any function (built-in or selfmade) that returns a desired 
value of choice 
- sequence: any iterable data type

def square(num):
  '''squares the given num argument'''
  return num ** 2
  
 array = list(range(1,11)) #our iterable
 square_array = list(map(square,array))
 #map(function,sequence)
 
 print('original array:' , array)
 print('Array squared:', square_array)
 
#second print statement prints out the squares of all numbers in ascending order
Array Squared: [1,4,9,16,25,36,49,64,81,100]

- The map function doesn't return a specific data type, but rather, a python iterable data. AFTER WE APPLY THE MAP FUNCTIN, we use a list function on it.
- try not to use methods with map, chances are a method already exists for what we want to do.

#Filter Function
idea: filter out items from a data set that meets a certain condition
formatting:

filter(bool_returning_function, sequence)
- function: The function name we provide for filter() must be return a boole
- sequence: any iterable data type

def isOdd(x):
  '''isOdd() returns True if x is odd.'''
  return x % 2 != 0

array = list(range(1,101))
odds = list(filter(isOdd, array))

print('Odd numbers from 1 to 100:', odds)

def isPalindrome(x):
  '''isPalindrome returns True if string X is a palindrome.'''
  return x == x[::-1]
  
 array = list(range(1,10000))
 
 palindromic_numbers = list(map(int, filter(isPalindrom, map(str,array)))) #string function
 print('Palindromic Numbers from 1 to 10,000', palindromicNumber)
 Function Composition Breakdown:
 - To get a string version of the array --> map(str,array)
 - filter out the palindrom --> filter(isPalindrome, string version of the array) 
 - all values back to integers --> map(int, palindromes) #int is our function
 - turning mapped integers back inside a list --> list(palindromicIterables)
 
 
